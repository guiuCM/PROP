/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacio;

import domain.CjtProductos;
import domain.Producto;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.GridLayout;
import java.io.File;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author guiu
 */
public class MenuAnalista extends javax.swing.JFrame {
    private final javax.swing.JFrame padre;
    private Ctrl_Presentacio CP;
    private final String nombre;
    private JPanel panelLateral;
    private String modoPanel;

    /**
     * Creates new form MenuAnalista
     */
    public MenuAnalista(LoginPanel padre, Ctrl_Presentacio CP, String nombre) {
        this.padre = padre;
        this.CP = CP;
        this.nombre = nombre;
        initComponents();
        this.setLocationRelativeTo(null);
        this.setLayout(new BorderLayout());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        cerrarSesion = new javax.swing.JButton();
        modificarAfinidad = new javax.swing.JButton();
        modificarContra = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titulo.setText("Analista");

        cerrarSesion.setText("LOG OUT");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });

        modificarAfinidad.setText("MODIFICAR AFINIDADES");
        modificarAfinidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarAfinidadActionPerformed(evt);
            }
        });

        modificarContra.setText("CAMBIAR CONTRASEÑA");
        modificarContra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarContraActionPerformed(evt);
            }
        });

        jButton1.setText("IMPORTAR AFINIDADES");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cerrarSesion)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(modificarContra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modificarAfinidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(403, 403, 403))
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(titulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cerrarSesion)
                .addGap(18, 18, 18)
                .addComponent(titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modificarAfinidad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(42, 42, 42)
                .addComponent(modificarContra)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
    private void inicializarPanelLateral() {
        // Crear el panel lateral si aún no existe
        if (panelLateral == null) {
            panelLateral = new JPanel(new GridLayout(7, 5, 5, 5));
            panelLateral.setPreferredSize(new Dimension(300, 250));
        }

        // Limpiar el contenido actual del panel
        panelLateral.removeAll();

        if ("modificarAfinidad".equals(modoPanel)) {
            panelLateral.removeAll(); // Limpiar el panel
            panelLateral.setBorder(BorderFactory.createTitledBorder("Modificar Afinidad"));
            panelLateral.setLayout(new BorderLayout()); // Layout para gestionar el scroll y el contenido

            // Obtener la instancia del conjunto de productos
            CjtProductos conjunto = CjtProductos.obtenerInstancia();

            // Verificar si la instancia se pudo obtener
            if (conjunto == null) {
                JOptionPane.showMessageDialog(null, "Error: No se pudo obtener la instancia del conjunto de productos.",
                                "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si la matriz de afinidades está disponible
            int[][] matrizAfinidad = conjunto.getMatrizAfinidad();
            if (matrizAfinidad == null) {
                JOptionPane.showMessageDialog(null, "Error: La matriz de afinidades no está inicializada.",
                                "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener productos dinámicos
            Map<Integer, Producto> productosDinamicos = conjunto.getProductosDinamicos();

            // Crear encabezados de columnas
            String[] columnNames = new String[productosDinamicos.size() + 1];
            columnNames[0] = ""; // Celda vacía para la primera fila/columna
            int index = 1;
            for (Producto producto : productosDinamicos.values()) {
                columnNames[index++] = producto.obtenerNombre();
            }

            // Crear datos para la tabla
            Object[][] data = new Object[productosDinamicos.size()][productosDinamicos.size() + 1];
            index = 0;
            for (Producto filaProducto : productosDinamicos.values()) {
                data[index][0] = filaProducto.obtenerNombre(); // Nombre de la fila
                int columnIndex = 1;
                for (Producto columnaProducto : productosDinamicos.values()) {
                    int i = filaProducto.obtenerPosMatriz();
                    int j = columnaProducto.obtenerPosMatriz();
                    if (i == j) {
                        data[index][columnIndex++] = 100; // Diagonal principal
                    } else {
                        data[index][columnIndex++] = matrizAfinidad[i][j]; // Valores de afinidad
                    }
                }
                index++;
            }

            // Crear la tabla
            JTable table = new JTable(data, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    // Permitir la edición solo en las celdas no encabezado ni diagonal
                    return column > 0 && row != column - 1;
                }

                @Override
                public Class<?> getColumnClass(int column) {
                    return Integer.class; // Todas las celdas son números enteros
                }
            };

            table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // No ajustar automáticamente

            // Renderizador especial para la primera fila y la primera columna
            DefaultTableCellRenderer specialRenderer = new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    if (row == -1 || column == 0) { // Estilo especial para la primera fila y la primera columna
                        c.setFont(table.getTableHeader().getFont().deriveFont(Font.BOLD)); // Negrita
                        c.setBackground(Color.LIGHT_GRAY); // Fondo gris claro
                        setHorizontalAlignment(SwingConstants.CENTER); // Centrar texto
                        setBorder(BorderFactory.createLineBorder(Color.BLACK)); // Líneas negras
                    } else {
                        c.setBackground(Color.WHITE); // Fondo blanco para las demás celdas
                        setBorder(null); // Bordes normales para celdas regulares
                    }

                    return c;
                }
            };

            // Aplicar el renderizador especial solo a las columnas específicas
            for (int column = 0; column < table.getColumnCount(); column++) {
                table.getColumnModel().getColumn(column).setCellRenderer(specialRenderer);
            }

            // Ajustar el ancho de las columnas para que los nombres no se corten
            int cellWidth = Math.max(50, 100); // Ancho mínimo
            for (int column = 0; column < table.getColumnCount(); column++) {
                table.getColumnModel().getColumn(column).setPreferredWidth(cellWidth);
            }
            table.setRowHeight(30); // Fijar altura de las filas




            // Añadir un listener para actualizar la matriz de afinidad
            table.getModel().addTableModelListener(e -> {
                int row = e.getFirstRow();
                int column = e.getColumn();

                if (column > 0 && row != column - 1) {
                    try {
                        Producto filaProducto = (Producto) productosDinamicos.values().toArray()[row];
                        Producto columnaProducto = (Producto) productosDinamicos.values().toArray()[column - 1];

                        int idProd1 = filaProducto.obtenerId();
                        int idProd2 = columnaProducto.obtenerId();
                        int nuevoValor = (int) table.getValueAt(row, column);

                        conjunto.agregarAfinidadEntreDosProductos(idProd1, idProd2, nuevoValor);

                        JOptionPane.showMessageDialog(null, "Afinidad actualizada entre " + filaProducto.obtenerNombre() +
                                " y " + columnaProducto.obtenerNombre() + " a " + nuevoValor + ".", "Éxito",
                                JOptionPane.INFORMATION_MESSAGE);
                        // Refrescar el panel lateral
                        inicializarPanelLateral();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Error al actualizar afinidad: " + ex.getMessage(),
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });

            // Crear un JScrollPane y añadir la tabla
            JScrollPane scrollPane = new JScrollPane(table);
            panelLateral.add(scrollPane, BorderLayout.CENTER);

        }
        else if ("cambiarContraseña".equals(modoPanel)) {
            panelLateral.removeAll(); // Limpiar el panel
            panelLateral.setLayout(new GridLayout(8, 1, 5, 5)); // Configurar diseño adecuado
            panelLateral.setBorder(BorderFactory.createTitledBorder("Modificar Contraseña"));

            // Crear los campos de entrada para la contraseña actual y las nuevas
            JTextField oldPasswordField = new JPasswordField();
            JTextField newPasswordField1 = new JPasswordField();
            JTextField newPasswordField2 = new JPasswordField();

            // Añadir componentes al panel
            panelLateral.add(new JLabel("Contraseña actual:"));
            panelLateral.add(oldPasswordField);
            panelLateral.add(new JLabel("Nueva contraseña:"));
            panelLateral.add(newPasswordField1);
            panelLateral.add(new JLabel("Repetir nueva contraseña:"));
            panelLateral.add(newPasswordField2);

            // Crear el botón para cambiar la contraseña
            JButton cambiarButton = new JButton("Cambiar Contraseña");
            panelLateral.add(cambiarButton);

            // Añadir listener al botón
            cambiarButton.addActionListener(evt -> {
                // Obtener los valores ingresados
                String oldPassword = oldPasswordField.getText();
                String newPassword1 = newPasswordField1.getText();
                String newPassword2 = newPasswordField2.getText();

                // Validar que los campos no estén vacíos
                if (oldPassword.isEmpty() || newPassword1.isEmpty() || newPassword2.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Por favor, completa todos los campos.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Validar la contraseña actual
                if (!CP.comprobarContraseña(oldPassword)) {
                    JOptionPane.showMessageDialog(null, "La contraseña actual es incorrecta.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    oldPasswordField.setText("");
                    return;
                }

                // Validar que la nueva contraseña no sea igual a la antigua
                if (oldPassword.equals(newPassword1)) {
                    JOptionPane.showMessageDialog(null, "La nueva contraseña no puede ser igual a la actual.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    newPasswordField1.setText("");
                    newPasswordField2.setText("");
                    return;
                }

                // Validar que las dos contraseñas nuevas coincidan
                if (!newPassword1.equals(newPassword2)) {
                    JOptionPane.showMessageDialog(null, "Las nuevas contraseñas no coinciden.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    newPasswordField1.setText("");
                    newPasswordField2.setText("");
                    return;
                }

                // Intentar cambiar la contraseña
                try {
                    CP.cambiarContrasena(oldPassword, newPassword1, newPassword2);
                    JOptionPane.showMessageDialog(null, "Contraseña cambiada exitosamente.", 
                                                  "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    // Manejar posibles errores durante el cambio de contraseña
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            });
        }
        else if ("importar".equals(modoPanel)) {
        panelLateral.removeAll(); // Limpiar el panel
        panelLateral.setLayout(new BorderLayout()); // Usar un diseño sencillo
        panelLateral.setBorder(BorderFactory.createTitledBorder("Importar Productos"));

        // Crear botón para abrir el JFileChooser
        JButton importarButton = new JButton("Seleccionar archivo");
        JLabel selectedFileLabel = new JLabel("Archivo seleccionado: Ninguno");

        // Añadir el botón y la etiqueta al panel
        JPanel importPanel = new JPanel();
        importPanel.setLayout(new GridLayout(2, 1, 5, 5)); // Diseño en dos filas
        importPanel.add(importarButton);
        importPanel.add(selectedFileLabel);

        panelLateral.add(importPanel, BorderLayout.CENTER);

        // Añadir listener al botón para seleccionar un archivo
        importarButton.addActionListener(evt -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Seleccionar archivo para importar");

            // Abrir el cuadro de diálogo para seleccionar archivo
            int userSelection = fileChooser.showOpenDialog(null);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                String filePath = selectedFile.getAbsolutePath();

                // Actualizar la etiqueta con la ruta del archivo seleccionado
                selectedFileLabel.setText("Archivo seleccionado: " + filePath);

                // Intentar importar los productos usando el controlador
                try {
                    CP.importAfinidadesFromFile(filePath);
                    JOptionPane.showMessageDialog(null, "Productos importados exitosamente.", 
                                                  "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error al importar productos: " + e.getMessage(), 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Si el usuario cancela, mostrar un mensaje opcional
                selectedFileLabel.setText("Archivo seleccionado: Ninguno");
            }
        });
    }
        
    // Refrescar el panel lateral
    panelLateral.revalidate();
    panelLateral.repaint();
    }
    
    private void cambiarModoPanel(String nuevoModo) {
        this.modoPanel = nuevoModo;
        inicializarPanelLateral();
    }
    
    
    private void modificarAfinidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarAfinidadActionPerformed
         // Inicializar el panel lateral si no está inicializado
       inicializarPanelLateral();
       cambiarModoPanel("modificarAfinidad");

       // Obtener el contenedor principal
       java.awt.Container container = this.getContentPane();

       // Verificar si el panel lateral ya está añadido
       if (panelLateral.getParent() == null) {
           // Añadir el panel lateral al borde este
           container.add(panelLateral, BorderLayout.EAST);

           // Forzar la actualización visual
           container.revalidate();
           container.repaint();

           //JOptionPane.showMessageDialog(this, "El panel lateral se ha añadido correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
       }  
    }//GEN-LAST:event_modificarAfinidadActionPerformed

    
    
    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "Estás seguro de que quieres salir?", "Confirmar Salida", JOptionPane.YES_NO_OPTION);
        
        // Verificar la respuesta del usuario
        if (respuesta == JOptionPane.YES_OPTION) {
            this.setVisible(false);
            padre.setVisible(true);
            CP.cerrarSesion();
        }
    }//GEN-LAST:event_cerrarSesionActionPerformed

    private void modificarContraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarContraActionPerformed
        // Inicializar el panel lateral si no está inicializado
       inicializarPanelLateral();
       cambiarModoPanel("cambiarContraseña");

       // Obtener el contenedor principal
       java.awt.Container container = this.getContentPane();

       // Verificar si el panel lateral ya está añadido
       if (panelLateral.getParent() == null) {
           // Añadir el panel lateral al borde este
           container.add(panelLateral, BorderLayout.EAST);

           // Forzar la actualización visual
           container.revalidate();
           container.repaint();

           //JOptionPane.showMessageDialog(this, "El panel lateral se ha añadido correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
       }  
    }//GEN-LAST:event_modificarContraActionPerformed

    //importar
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Inicializar el panel lateral si no está inicializado
       inicializarPanelLateral();
       cambiarModoPanel("importar");

       // Obtener el contenedor principal
       java.awt.Container container = this.getContentPane();

       // Verificar si el panel lateral ya está añadido
       if (panelLateral.getParent() == null) {
           // Añadir el panel lateral al borde este
           container.add(panelLateral, BorderLayout.EAST);

           // Forzar la actualización visual
           container.revalidate();
           container.repaint();

           //JOptionPane.showMessageDialog(this, "El panel lateral se ha añadido correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
       } 
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton modificarAfinidad;
    private javax.swing.JButton modificarContra;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
