/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacio;

import domain.CjtProductos;
import domain.Producto;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.table.DefaultTableCellRenderer;
import util.AlgoritmosQAP;
import util.AlgoritmosTSP;
import util.Par;
import util.Tripleta;

/**
 *
 * @author guiu
 */
public class MenuEstandard extends javax.swing.JFrame {
    private final javax.swing.JFrame padre;
    private Ctrl_Presentacio CP;
    private final String nombre;
    private int numeroBaldas;
    private int numeroProds;
    private int idDist;
    private Par<Integer, Tripleta<Integer, Long, int[][]>>  resultado;
    private JPanel panelPrincipal;
    private JPanel panelMenu; // Panel principal para cambiar entre pantallas
    private JPanel panelLateral;
    private String modoPanel;

    /**
     * Creates new form MenuEstandard
     */
    public MenuEstandard(LoginPanel padre, Ctrl_Presentacio CP, String nombre) {
        this.padre = padre;
        this.CP = CP;
        this.nombre = nombre;
        initComponents();
        this.setLocationRelativeTo(null);
        this.setLayout(new BorderLayout());
        
        this.panelMenu = (JPanel) this.getContentPane();
        //this.setResizable(true); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void inicializarPanelLateral() {
        // Crear el panel lateral si aún no existe
        if (panelLateral == null) {
            panelLateral = new JPanel(new GridLayout(7, 5, 5, 5));
            panelLateral.setPreferredSize(new Dimension(300, 250));
        }

        // Limpiar el contenido actual del panel
        panelLateral.removeAll();

        if ("crearDistribucio".equals(modoPanel)) {
          //fer  

        }
        else if ("mostraórDistribucio".equals(modoPanel)) {
            
        }
        else if ("cambiarContraseña".equals(modoPanel)) {
            panelLateral.removeAll(); // Limpiar el panel
            panelLateral.setLayout(new GridLayout(8, 1, 5, 5)); // Configurar diseño adecuado
            panelLateral.setBorder(BorderFactory.createTitledBorder("Modificar Contraseña"));

            // Crear los campos de entrada para la contraseña actual y las nuevas
            JTextField oldPasswordField = new JPasswordField();
            JTextField newPasswordField1 = new JPasswordField();
            JTextField newPasswordField2 = new JPasswordField();

            // Añadir componentes al panel
            panelLateral.add(new JLabel("Contraseña actual:"));
            panelLateral.add(oldPasswordField);
            panelLateral.add(new JLabel("Nueva contraseña:"));
            panelLateral.add(newPasswordField1);
            panelLateral.add(new JLabel("Repetir nueva contraseña:"));
            panelLateral.add(newPasswordField2);

            // Crear el botón para cambiar la contraseña
            JButton cambiarButton = new JButton("Cambiar Contraseña");
            panelLateral.add(cambiarButton);

            // Añadir listener al botón
            cambiarButton.addActionListener(evt -> {
                // Obtener los valores ingresados
                String oldPassword = oldPasswordField.getText();
                String newPassword1 = newPasswordField1.getText();
                String newPassword2 = newPasswordField2.getText();

                // Validar que los campos no estén vacíos
                if (oldPassword.isEmpty() || newPassword1.isEmpty() || newPassword2.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Por favor, completa todos los campos.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Validar la contraseña actual
                if (!CP.comprobarContraseña(oldPassword)) {
                    JOptionPane.showMessageDialog(null, "La contraseña actual es incorrecta.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    oldPasswordField.setText("");
                    return;
                }

                // Validar que la nueva contraseña no sea igual a la antigua
                if (oldPassword.equals(newPassword1)) {
                    JOptionPane.showMessageDialog(null, "La nueva contraseña no puede ser igual a la actual.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    newPasswordField1.setText("");
                    newPasswordField2.setText("");
                    return;
                }

                // Validar que las dos contraseñas nuevas coincidan
                if (!newPassword1.equals(newPassword2)) {
                    JOptionPane.showMessageDialog(null, "Las nuevas contraseñas no coinciden.", 
                                                  "Error", JOptionPane.ERROR_MESSAGE);
                    newPasswordField1.setText("");
                    newPasswordField2.setText("");
                    return;
                }

                // Intentar cambiar la contraseña
                try {
                    CP.cambiarContrasena(oldPassword, newPassword1, newPassword2);
                    JOptionPane.showMessageDialog(null, "Contraseña cambiada exitosamente.", 
                                                  "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    // Manejar posibles errores durante el cambio de contraseña
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            });
        }
    // Refrescar el panel lateral
    panelLateral.revalidate();
    panelLateral.repaint();
    }
    
    private void cambiarModoPanel(String nuevoModo) {
        this.modoPanel = nuevoModo;
        inicializarPanelLateral();
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo = new javax.swing.JLabel();
        cerrarSesion = new javax.swing.JButton();
        crearDist = new javax.swing.JButton();
        mostrarDist = new javax.swing.JButton();
        modificarContra = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titulo.setText("Usuario Estandard");

        cerrarSesion.setText("LOG OUT");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });

        crearDist.setText("CREAR DISTRIBUCIÓN");
        crearDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearDistActionPerformed(evt);
            }
        });

        mostrarDist.setText("MOSTRAR DISTRIBUCIONES");
        mostrarDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarDistActionPerformed(evt);
            }
        });

        modificarContra.setText("CAMBIAR CONTRASEÑA");
        modificarContra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarContraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cerrarSesion)
                .addGap(549, 549, 549))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mostrarDist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(crearDist, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(modificarContra, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(407, 407, 407))
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(titulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cerrarSesion)
                .addGap(84, 84, 84)
                .addComponent(titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(crearDist)
                .addGap(18, 18, 18)
                .addComponent(mostrarDist)
                .addGap(46, 46, 46)
                .addComponent(modificarContra)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //log out (cerrar session)
    private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
          int respuesta = JOptionPane.showConfirmDialog(null, "Estás seguro de que quieres salir?", "Confirmar Salida", JOptionPane.YES_NO_OPTION);
        
        // Verificar la respuesta del usuario
        if (respuesta == JOptionPane.YES_OPTION) {
            this.setVisible(false);
            padre.setVisible(true);
            CP.cerrarSesion();
        }

    }//GEN-LAST:event_cerrarSesionActionPerformed

    //crear estanteria
    private void crearDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearDistActionPerformed
     // Obtener la instancia de CjtProductos
        //this.setVisible(false);
        CjtProductos conjunto = CjtProductos.obtenerInstancia();
        
        

        // Verificar si los datos están fijados; si no, fijarlos
        if (!conjunto.obtenerDatosFijados()) {
            try {
                conjunto.fijarDatos();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,
                                              "Error al fijar los datos: " + e.getMessage(),
                                              "Error",
                                              JOptionPane.ERROR_MESSAGE);
                return; // Salir si no se pueden fijar los datos
            }
        }

        // Crear el panel para la gestión de productos en la lista de productos seleccionados
        JPanel panelGestionProductos = crearPanelDeGestionAñadirYEliminar(conjunto);
        
   

        // Mostrar el panel en un JOptionPane
        JOptionPane.showMessageDialog(null, panelGestionProductos, "Gestión de Productos", JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_crearDistActionPerformed

    // Función principal para crear la pantalla inicial con gestión de productos
private JPanel crearPanelDeGestionAñadirYEliminar(CjtProductos conjunto) {
    panelPrincipal = new JPanel(new BorderLayout());
   

    // Crear las listas de productos disponibles y seleccionados
    DefaultListModel<String> modeloDinamicos = new DefaultListModel<>();
    DefaultListModel<String> modeloSeleccionados = new DefaultListModel<>();

    for (Producto p : conjunto.obtenerTodosLosProductos()) {
        modeloDinamicos.addElement("ID: " + p.obtenerId() + " - " + p.obtenerNombre());
    }
    for (Producto p : conjunto.obtenerProductosSeleccionados()) {
        modeloSeleccionados.addElement("ID: " + p.obtenerId() + " - " + p.obtenerNombre());
    }

    JList<String> listaDinamicos = new JList<>(modeloDinamicos);
    JList<String> listaSeleccionados = new JList<>(modeloSeleccionados);

    // Configurar bordes
    listaDinamicos.setBorder(BorderFactory.createTitledBorder("Productos Disponibles"));
    listaSeleccionados.setBorder(BorderFactory.createTitledBorder("Productos Seleccionados"));

    // Configurar selección en verde
    listaSeleccionados.setSelectionBackground(Color.GREEN);

    // Configurar AÑADIR PRODUCTO A PRODUCTOS SELECCIONADOS con Drag and Drop
    listaDinamicos.setDragEnabled(true);
    listaSeleccionados.setDropMode(DropMode.INSERT);
    listaSeleccionados.setTransferHandler(new TransferHandler() {
        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.stringFlavor);
        }

        @Override
        public boolean importData(TransferSupport support) {
            try {
                // Obtener el ID del producto arrastrado
                String data = (String) support.getTransferable().getTransferData(DataFlavor.stringFlavor);
                int id = Integer.parseInt(data.split(" ")[1]); // Extraer el ID del texto

                // Llamar al método para agregar productos a la selección
                conjunto.agregarProductosALaSeleccion(new int[]{id});

                // Actualizar el modelo de la lista seleccionada
                actualizarModeloProductos(conjunto, modeloSeleccionados);

                return true;
            } catch (Exception e) {
                mostrarError("Error al agregar el producto: " + e.getMessage());
                return false;
            }
        }
    });
    // Crear botón para ELIMINAR PRODUCTOS SELECCIONADOS
    JButton botonEliminar = new JButton("Eliminar Producto");
    botonEliminar.setBackground(Color.RED);
    botonEliminar.setForeground(Color.WHITE);
    botonEliminar.setFocusPainted(false);
    botonEliminar.addActionListener(e -> {
        String productoSeleccionado = listaSeleccionados.getSelectedValue();
        if (productoSeleccionado != null) {
            int id = Integer.parseInt(productoSeleccionado.split(" ")[1]); // Extraer el ID del texto
            conjunto.deseleccionarListaProductos(new int[]{id});
            actualizarModeloProductos(conjunto, modeloSeleccionados);
        } else {
            mostrarAdvertencia("Seleccione un producto para eliminar");
        }
    });

    // Crear botón para LISTA COMPLETA, CALCULAR DISTRIBUCIÓN
    JButton botonCalcularDistribucion = new JButton("LISTA COMPLETA, CALCULAR DISTRIBUCIÓN");
    botonCalcularDistribucion.setBackground(Color.BLUE);
    botonCalcularDistribucion.setForeground(Color.WHITE);
    botonCalcularDistribucion.setFocusPainted(false);

    // Actualizar el estado del botón al inicio
    SwingUtilities.invokeLater(() -> actualizarEstadoBotonCalcular(botonCalcularDistribucion, modeloSeleccionados));

    // Listener para actualizar el estado del botón cuando la lista cambia
    modeloSeleccionados.addListDataListener(new ListDataListener() {
        @Override
        public void intervalAdded(ListDataEvent e) {
            actualizarEstadoBotonCalcular(botonCalcularDistribucion, modeloSeleccionados);
        }

        @Override
        public void intervalRemoved(ListDataEvent e) {
            actualizarEstadoBotonCalcular(botonCalcularDistribucion, modeloSeleccionados);
        }

        @Override
        public void contentsChanged(ListDataEvent e) {
            actualizarEstadoBotonCalcular(botonCalcularDistribucion, modeloSeleccionados);
        }
    });

    botonCalcularDistribucion.addActionListener(e -> {
        try {
            if (modeloSeleccionados.getSize() < 2) {
                throw new IllegalStateException("Debe seleccionar al menos 2 productos para calcular la distribución.");
            }
            preguntarNumBaldas();
            //mostrarPantallaDistribuciones(); // Cambiar a la pantalla de distribución
        } catch (Exception ex) {
            mostrarError("Error: " + ex.getMessage());
        }
    });

    // Panel para botones de control
    JPanel panelBotones = new JPanel(new GridLayout(2, 1, 5, 5));
    panelBotones.add(botonEliminar);
    panelBotones.add(botonCalcularDistribucion);

    // CREACIÓN DEL PANEL BASE CON LAS DOS LISTAS
    JPanel panelListas = new JPanel(new GridLayout(1, 2, 10, 10));
    panelListas.add(new JScrollPane(listaDinamicos));

    JPanel panelSeleccionados = new JPanel(new BorderLayout(5, 5));
    panelSeleccionados.add(new JScrollPane(listaSeleccionados), BorderLayout.CENTER);
    panelSeleccionados.add(panelBotones, BorderLayout.SOUTH);
    panelListas.add(panelSeleccionados);
    
    numeroProds = conjunto.obtenerProductosSeleccionadosLength();
    panelPrincipal.add(panelListas, BorderLayout.CENTER);
    /*
    JButton botonOk = new JButton("OK");
    botonOk.addActionListener(e -> {
        panelPrincipal.setVisible(false);
        this.setVisible(true); // Cambiar al panel "menu"
    });
    JPanel panelOk = new JPanel(new FlowLayout(FlowLayout.CENTER));
    panelOk.add(botonOk);

    panelPrincipal.add(panelOk, BorderLayout.SOUTH);
    */
    return panelPrincipal;

}
private void preguntarNumBaldas() {
    // Crear un panel para la entrada de datos
    JPanel panelBaldas = new JPanel(new BorderLayout(10, 10));
    panelBaldas.setLayout(new BoxLayout(panelBaldas, BoxLayout.Y_AXIS));
    
    JLabel etiqueta = new JLabel("Ingrese el número de baldas:");
    JTextField campoTexto = new JTextField(10);
    panelBaldas.add(etiqueta);
    panelBaldas.add(campoTexto);
    
    // Mostrar el cuadro de diálogo
    int resultado = JOptionPane.showConfirmDialog(null, panelBaldas, "Número de Baldas",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
    
    if (resultado == JOptionPane.OK_OPTION) {
        try {
            // Intentar convertir la entrada en un número entero
            numeroBaldas = Integer.parseInt(campoTexto.getText());
            if (numeroBaldas < 0)JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            else if (numeroProds % numeroBaldas != 0)JOptionPane.showMessageDialog(null, "No se pueden llenar todas las estanterias", "Error", JOptionPane.ERROR_MESSAGE);
            // Llamar al método para mostrar las distribuciones
            else mostrarPantallaDistribuciones();
        } catch (NumberFormatException e) {
            // Manejar caso de entrada no válida
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

}

// Cambiar a la pantalla con las opciones de distribución
private void mostrarPantallaDistribuciones() {
    JPanel panelDistribuciones = new JPanel(new BorderLayout(10, 10));
    JPanel panelBotones = new JPanel(new GridLayout(2, 1, 10, 10));

    JButton botonDistribucionLateral = new JButton("Obtener Distribución Lateral");
    botonDistribucionLateral.addActionListener(e -> mostrarPantallaLateral());

    JButton botonDistribucionVecinos = new JButton("Obtener Distribución Vecinos");
    botonDistribucionVecinos.addActionListener(e -> mostrarPantallaVecinos());

    // Agregar los botones de distribución al panel central
    panelBotones.add(botonDistribucionLateral);
    panelBotones.add(botonDistribucionVecinos);

    // Botón para volver atrás
    JButton botonAtras = new JButton("ATRÁS");
    botonAtras.setBackground(Color.BLUE); // Personalización
    botonAtras.setForeground(Color.WHITE);
    botonAtras.addActionListener(e -> volverAPantallaInicial());

    // Agregar los componentes al panel
    panelDistribuciones.add(panelBotones, BorderLayout.CENTER);
    panelDistribuciones.add(botonAtras, BorderLayout.SOUTH);

    // Reemplazar el contenido del panel principal
    panelPrincipal.removeAll();
    panelPrincipal.add(panelDistribuciones, BorderLayout.CENTER);
    panelPrincipal.revalidate();
    panelPrincipal.repaint();

}

// Cambiar a la pantalla de algoritmos de distribución lateral
private void mostrarPantallaLateral() {
     JPanel panelLateral = new JPanel(new BorderLayout(10, 10));
    JPanel panelBotones = new JPanel(new GridLayout(4, 1, 10, 10));

    JButton botonBruteForce = new JButton("BRUTEFORCE");
    JButton botonHeldKarp = new JButton("HELDKARP");
    JButton botonMST2Approximation = new JButton("MST2APPROXIMATION");
    JButton botonChristofides = new JButton("CHRISTOFIDES");

    // Agregar los botones de algoritmos al panel central
    panelBotones.add(botonBruteForce);
    panelBotones.add(botonHeldKarp);
    panelBotones.add(botonMST2Approximation);
    panelBotones.add(botonChristofides);
    
    botonBruteForce.addActionListener(e -> {
        resultado = CP.agregarEstanteriaPriorizandoProximidadLateral(AlgoritmosTSP.BRUTEFORCE, numeroBaldas);
        mostrarResultado("Brute Force", resultado);
    });
    
    botonHeldKarp.addActionListener(e -> {
        resultado = CP.agregarEstanteriaPriorizandoProximidadLateral(AlgoritmosTSP.HELDKARP, numeroBaldas);
        mostrarResultado("Held Karp", resultado);
    });
    
    botonMST2Approximation.addActionListener(e -> {
        resultado = CP.agregarEstanteriaPriorizandoProximidadLateral(AlgoritmosTSP.MST2APPROXIMATION, numeroBaldas);
        mostrarResultado("MST2 Approximation", resultado);
    });
    
    botonChristofides.addActionListener(e -> {
        resultado = CP.agregarEstanteriaPriorizandoProximidadLateral(AlgoritmosTSP.CHRISTOFIDES, numeroBaldas);
        mostrarResultado("Christofides", resultado);
    });

    // Botón para volver atrás
    JButton botonAtras = new JButton("ATRÁS");
    botonAtras.setBackground(Color.BLUE); // Personalización
    botonAtras.setForeground(Color.WHITE);
    botonAtras.addActionListener(e -> mostrarPantallaDistribuciones());

    // Agregar todo al panel principal
    panelLateral.add(panelBotones, BorderLayout.CENTER);
    panelLateral.add(botonAtras, BorderLayout.SOUTH);

    // Reemplazar el contenido del panel principal
    panelPrincipal.removeAll();
    panelPrincipal.add(panelLateral, BorderLayout.CENTER);
    panelPrincipal.revalidate();
    panelPrincipal.repaint();

}


// Cambiar a la pantalla de algoritmos de distribución basada en vecinos
private void mostrarPantallaVecinos() {
    JPanel panelVecinos = new JPanel(new BorderLayout(10, 10));
    JPanel panelBotones = new JPanel(new GridLayout(3, 1, 10, 10));

    JButton botonBruteForce = new JButton("BRUTEFORCE");
    JButton botonHillClimbing = new JButton("HILLCLIMBING");
    JButton botonSimulatedAnnealing = new JButton("SIMULATED_ANNEALING");

    // Agregar los botones de algoritmos al panel central
    panelBotones.add(botonBruteForce);
    panelBotones.add(botonHillClimbing);
    panelBotones.add(botonSimulatedAnnealing);
    
    //brute Force
    botonBruteForce.addActionListener(e -> {
        resultado = CP.agregarEstanteriaPriorizandoProximidadVecina(AlgoritmosQAP.BRUTEFORCE, numeroBaldas);
        mostrarResultado("Brute Force", resultado);
    });
    
    //Hill Climbing
    botonHillClimbing.addActionListener(e -> {
        resultado = CP.agregarEstanteriaPriorizandoProximidadVecina(AlgoritmosQAP.HILLCLIMBING, numeroBaldas);
        mostrarResultado("Hill Climbing", resultado);
    });
    
    //Simulated Annealing
    botonSimulatedAnnealing.addActionListener(e -> {
        resultado = CP.agregarEstanteriaPriorizandoProximidadVecina(AlgoritmosQAP.SIMULATED_ANNEALING, numeroBaldas);
        mostrarResultado("Simulated Annealing", resultado);
    });
    
    // Botón para volver atrás
    JButton botonAtras = new JButton("ATRÁS");
    botonAtras.setBackground(Color.BLUE); // Personalización
    botonAtras.setForeground(Color.WHITE);
    botonAtras.addActionListener(e -> mostrarPantallaDistribuciones());

    // Agregar todo al panel principal
    panelVecinos.add(panelBotones, BorderLayout.CENTER);
    panelVecinos.add(botonAtras, BorderLayout.SOUTH);

    // Reemplazar el contenido del panel principal
    panelPrincipal.removeAll();
    panelPrincipal.add(panelVecinos, BorderLayout.CENTER);
    panelPrincipal.revalidate();
    panelPrincipal.repaint();

}

// Método para mostrar los resultados
private void mostrarResultado(String algoritmo, Par<Integer, Tripleta<Integer, Long, int[][]>> resultado) {
     int idDist = resultado.obtenerPrimero();
    Tripleta<Integer, Long, int[][]> resultado2 = resultado.obtenerSegundo();
    int coste = resultado2.obtenerPrimero(); // Costo calculado
    long pasos = resultado2.obtenerSegundo(); // Número de pasos
    int[][] solucion = resultado2.obtenerTercero(); // Matriz de solución


    // Crear un panel para mostrar los resultados
    JPanel panelResultado = new JPanel(new BorderLayout(10, 10));

    // Panel superior con información de texto
    String info = "<html><h3>Resultado del Algoritmo</h3>" +
                  "<b>Algoritmo:</b> " + algoritmo + "<br>" +
                  "<b>ID Distribución:</b> " + idDist + "<br>" +
                  "<b>Coste:</b> " + coste + "<br>" +
                  "<b>Pasos:</b> " + pasos + "</html>";
    JLabel labelInfo = new JLabel(info);
    panelResultado.add(labelInfo, BorderLayout.NORTH);

    // Panel central para mostrar la solución como una matriz
    int filas = solucion.length;
    int columnas = solucion[0].length;
    JPanel panelMatriz = new JPanel(new GridLayout(filas, columnas, 5, 5));
    panelMatriz.setBorder(BorderFactory.createTitledBorder("Distribución de la Estantería"));

    for (int[] fila : solucion) {
        for (int celda : fila) {
            String nombreProducto = CP.obtenerP(celda).obtenerNombre(); // Obtener el nombre del producto para cada celda
            String marcaProducto = CP.obtenerP(celda).obtenerMarca(); // Obtener la marca
            String descripcionProducto = CP.obtenerP(celda).obtenerDescripcion(); // Obtener la descripción
            double peso = CP.obtenerP(celda).obtenerPeso();
            double precio = CP.obtenerP(celda).obtenerPrecio();

            JLabel celdaLabel = new JLabel(nombreProducto, SwingConstants.CENTER);
            celdaLabel.setOpaque(true);
            celdaLabel.setBackground(Color.LIGHT_GRAY);
            celdaLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

            // Añadir listener para mostrar el ID al hacer clic
            celdaLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    String mensaje = "<html><b>ID del producto:</b> " + celda + "<br>" +
                            "<b>Nombre:</b> " + nombreProducto + "<br>" +
                            "<b>Marca:</b> " + marcaProducto + "<br>" +
                            "<b>Descripción:</b> " + descripcionProducto + "<br>" +
                            "<b>Peso:</b> " + peso + "<b> g</b> "+ "<br>" +
                            "<b>Precio:</b> " + precio + "<b> €</b>" + "</html>";
                    JOptionPane.showMessageDialog(null, mensaje, "Información del Producto", JOptionPane.INFORMATION_MESSAGE);
                }
            });

            panelMatriz.add(celdaLabel);
        }
    }
    panelResultado.add(panelMatriz, BorderLayout.CENTER);

    // Panel inferior con botones
    JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.RIGHT));

    JButton btnGuardar = new JButton("Guardar");
    btnGuardar.setBackground(Color.BLUE);
    btnGuardar.setForeground(Color.WHITE);
    btnGuardar.addActionListener(e -> guardarResultado());
    
    JButton btnEliminar = new JButton("Eliminar");
    btnEliminar.setBackground(Color.RED);
    btnEliminar.setForeground(Color.WHITE);
    btnEliminar.addActionListener(e -> borrarDistribucion(idDist));

    panelBotones.add(btnGuardar);
    panelBotones.add(btnEliminar);

    panelResultado.add(panelBotones, BorderLayout.SOUTH);

    // Mostrar en un JOptionPane
    JScrollPane scrollPane = new JScrollPane(panelResultado);
    scrollPane.setPreferredSize(new Dimension(400, 400));
    JOptionPane.showMessageDialog(null, scrollPane, "Resultado", JOptionPane.INFORMATION_MESSAGE);

}

// Métodos para manejar las acciones de los botones
private void guardarResultado() {
    JOptionPane.showMessageDialog(null, "Distribución guardadaó exitosamente.", "Guardar", JOptionPane.INFORMATION_MESSAGE);
}

private void borrarDistribucion(int idDist) {
    int respuesta = JOptionPane.showConfirmDialog(null, "Estás seguro de que quieres eliminarla?", "Confirmar borrado", JOptionPane.YES_NO_OPTION);
        
    // Verificar la respuesta del usuario
    if (respuesta == JOptionPane.YES_OPTION) {
        CP.borrarDistribucion(idDist);
        JOptionPane.showMessageDialog(null, "Distribución eliminada exitosamente.", "Eliminar", JOptionPane.INFORMATION_MESSAGE);
    }
 }
    

private void volverAPantallaInicial() {
    panelPrincipal.removeAll();
    panelPrincipal.add(crearPanelDeGestionAñadirYEliminar(CjtProductos.obtenerInstancia()), BorderLayout.CENTER);
    panelPrincipal.revalidate();
    panelPrincipal.repaint();
}

private void mostrarError(String mensaje) {
    // Crear un cuadro de diálogo con el mensaje de error
    JOptionPane optionPane = new JOptionPane(mensaje, JOptionPane.ERROR_MESSAGE);
    JDialog dialog = optionPane.createDialog("Error");
    dialog.setAlwaysOnTop(true); // Asegura que el cuadro de diálogo esté en la parte superior
    dialog.setVisible(true); // Muestra el cuadro de diálogo
}

private void mostrarAdvertencia(String mensaje) {
    // Crear un cuadro de diálogo con el mensaje de advertencia
    JOptionPane optionPane = new JOptionPane(mensaje, JOptionPane.WARNING_MESSAGE);
    JDialog dialog = optionPane.createDialog("Advertencia");
    dialog.setAlwaysOnTop(true); // Asegura que el cuadro de diálogo esté en la parte superior
    dialog.setVisible(true); // Muestra el cuadro de diálogo
}

private void actualizarEstadoBotonCalcular(JButton boton, DefaultListModel<String> modeloSeleccionados) {
    // Habilitar el botón solo si hay 2 o más productos seleccionados
    boton.setEnabled(modeloSeleccionados.getSize() >= 2);
}

    private void actualizarModeloProductos(CjtProductos conjunto, DefaultListModel<String> modeloSeleccionados) {
        // Limpiar el modelo y volver a llenarlo
        modeloSeleccionados.clear();
        for (Producto p : conjunto.obtenerProductosSeleccionados()) {
            modeloSeleccionados.addElement("ID: " + p.obtenerId() + " - " + p.obtenerNombre());
        }
    }
    
    //mostrar distribuciones
    private void mostrarDistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarDistActionPerformed
      this.setSize(1000, 700); // Ancho x Alto
      this.setLocationRelativeTo(null); // Centrar la ventana en la pantalla

      // Crear un panel principal dividido
      JPanel panelPrincipal = new JPanel(new BorderLayout());

      // Panel izquierdo
      JPanel panelIzquierdo = new JPanel();
      panelIzquierdo.setLayout(new BorderLayout());

      // Obtener distribuciones desde CP
      Map<Integer, Par<int[][], String>> distribuciones = CP.obtenerDistribuciones();

      // Lista de distribuciones con scroll
      DefaultListModel<Integer> modeloLista = new DefaultListModel<>();
      distribuciones.keySet().forEach(modeloLista::addElement); // Agregar identificadores al modelo
      JList<Integer> listaDistribuciones = new JList<>(modeloLista);
      listaDistribuciones.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      JScrollPane scrollPane = new JScrollPane(listaDistribuciones);

      // Botones
      JButton btnAtras = new JButton("Atrás");
      JButton btnMostrar = new JButton("Mostrar Distribución");
      JButton btnModificar = new JButton("Modificar Distribución");
      btnMostrar.setEnabled(false); // Deshabilitar inicialmente
      btnModificar.setEnabled(false);

      // Habilitar botones si hay una distribución seleccionada
      listaDistribuciones.addListSelectionListener(e -> {
          boolean seleccionValida = !listaDistribuciones.isSelectionEmpty();
          btnMostrar.setEnabled(seleccionValida);
          btnModificar.setEnabled(seleccionValida);
      });

      // Acción del botón "Atrás"
      btnAtras.addActionListener(e -> {
        this.setContentPane(panelMenu);
        this.revalidate();
        this.repaint();
      });

      // Acción del botón "Mostrar Distribución"
      btnMostrar.addActionListener(e -> {
          Integer idSeleccionado = listaDistribuciones.getSelectedValue();
          if (idSeleccionado != null) {
              mostrarDistribucionEnPanelDerecho(idSeleccionado);
          }
      });

      // Acción del botón "Modificar Distribución" (por ahora sin funcionalidad)
      btnModificar.addActionListener(e -> {
          Integer idSeleccionado = listaDistribuciones.getSelectedValue();
          if (idSeleccionado != null) {
              modificarDistribucionEnPanelDerecho(idSeleccionado);
          }
      });

      // Panel para los botones en la parte inferior de la izquierda
      JPanel panelBotones = new JPanel();
      panelBotones.setLayout(new GridLayout(3, 1, 5, 5));
      panelBotones.add(btnAtras);
      panelBotones.add(btnMostrar);
      panelBotones.add(btnModificar);

      // Agregar scroll y botones al panel izquierdo
      panelIzquierdo.add(scrollPane, BorderLayout.CENTER);
      panelIzquierdo.add(panelBotones, BorderLayout.SOUTH);

      // Panel derecho (vacío inicialmente)
      JPanel panelDerecho = new JPanel();
      panelDerecho.setLayout(new BorderLayout());
      JLabel labelInicial = new JLabel("Seleccione una distribución para mostrar o modificar.", SwingConstants.CENTER);
      panelDerecho.add(labelInicial, BorderLayout.CENTER);

      // Agregar secciones al panel principal
      panelPrincipal.add(panelIzquierdo, BorderLayout.WEST);
      panelPrincipal.add(panelDerecho, BorderLayout.CENTER);

      // Mostrar el panel principal en el JFrame principal
      this.setContentPane(panelPrincipal);
      this.revalidate();
      this.repaint();
    }//GEN-LAST:event_mostrarDistActionPerformed

private void modificarDistribucionEnPanelDerecho(Integer idDistribucion) {
    // Obtener la distribución seleccionada desde CP
    Par<int[][], String> distribucion = CP.obtenerDistribucion(idDistribucion);
    if (distribucion == null) {
        mostrarError("No se pudo obtener la distribución seleccionada.");
        return;
    }

    int[][] matriz = distribucion.obtenerPrimero();
    String algoritmo = distribucion.obtenerSegundo();
    List<Integer> seleccion = new ArrayList<>();

    // Crear un nuevo panel para la modificación
    JPanel panelModificar = new JPanel(new BorderLayout(10, 10));

    // Crear un panel para mostrar la distribución como una matriz
    JPanel panelMatriz = new JPanel(new GridLayout(matriz.length, matriz[0].length, 5, 5));
    panelMatriz.setBorder(BorderFactory.createTitledBorder("Seleccione dos productos para intercambiar"));

    // Crear el botón Confirmar Swap
    JButton btnConfirmarSwap = new JButton("Confirmar Swap");
    btnConfirmarSwap.setEnabled(false); // Deshabilitar inicialmente
    btnConfirmarSwap.addActionListener(e -> {
        if (seleccion.size() == 2) {
            // Realizar el swap
            CP.swapDosProductosDistribucion(idDistribucion, seleccion.get(0), seleccion.get(1));
            seleccion.clear();

            // Mostrar la nueva distribución actualizada
            mostrarDistribucionEnPanelDerecho(idDistribucion);
        }
    });

    // Llenar la matriz con productos
    for (int i = 0; i < matriz.length; i++) {
        for (int j = 0; j < matriz[i].length; j++) {
            int productoId = matriz[i][j];
            String nombreProducto = CP.obtenerP(productoId).obtenerNombre();

            JLabel celdaLabel = new JLabel(nombreProducto, SwingConstants.CENTER);
            celdaLabel.setOpaque(true);
            celdaLabel.setBackground(Color.LIGHT_GRAY);
            celdaLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

            // Añadir listener para seleccionar productos
            celdaLabel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (seleccion.contains(productoId)) {
                        seleccion.remove((Integer) productoId); // Desmarcar si ya está seleccionado
                        celdaLabel.setBackground(Color.LIGHT_GRAY);
                    } else if (seleccion.size() < 2) {
                        seleccion.add(productoId); // Marcar el producto
                        celdaLabel.setBackground(Color.YELLOW);
                    }
                    btnConfirmarSwap.setEnabled(seleccion.size() == 2); // Habilitar el botón si hay 2 productos seleccionados
                }
            });

            panelMatriz.add(celdaLabel);
        }
    }

    // Botón Atrás
    JButton btnAtras = new JButton("Atrás");
    btnAtras.addActionListener(e -> {
        mostrarDistribucionEnPanelDerecho(idDistribucion);
    });

    // Agregar componentes al panel
    JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.RIGHT));
    panelBotones.add(btnConfirmarSwap);
    panelBotones.add(btnAtras);

    panelModificar.add(panelMatriz, BorderLayout.CENTER);
    panelModificar.add(panelBotones, BorderLayout.SOUTH);

    // Mostrar el panel de modificación en el panel derecho
    JPanel panelDerecho = (JPanel) this.getContentPane().getComponent(1); // Obtener el panel derecho
    panelDerecho.removeAll();
    panelDerecho.add(panelModificar, BorderLayout.CENTER);
    panelDerecho.revalidate();
    panelDerecho.repaint();
}

private void mostrarDistribucionEnPanelDerecho(Integer idDistribucion) {
    // Obtener la distribución seleccionada desde CP
    Par<int[][], String> distribucion = CP.obtenerDistribucion(idDistribucion);
    if (distribucion != null) {
        // Adaptar los datos para la función mostrarResultado
        int[][] matriz = distribucion.obtenerPrimero();
        String algoritmo = distribucion.obtenerSegundo();
        Integer coste = CP.obtenerCoste(idDist);
        Long pasos = CP.obtenerPasos(idDist);
        Par<Integer, Tripleta<Integer, Long, int[][]>> resultadoAdaptado =
            new Par<>(idDistribucion, new Tripleta<>(coste, pasos, matriz)); // Coste y pasos como placeholders

        // Panel derecho donde se mostrará el contenido
        JPanel panelDerecho = (JPanel) this.getContentPane().getComponent(1); // Obtener el panel derecho

        // Llamar a mostrarResultadoEnPanel con mostrarBotones = false
        mostrarResultadoEnPanel(algoritmo, resultadoAdaptado, panelDerecho, false);
    }
}

private void mostrarResultadoEnPanel(String algoritmo, Par<Integer, Tripleta<Integer, Long, int[][]>> resultado, JPanel panelDestino, boolean mostrarBotones) {
    idDist = resultado.obtenerPrimero();
    Tripleta<Integer, Long, int[][]> resultado2 = resultado.obtenerSegundo();
    int coste = resultado2.obtenerPrimero(); // Costo calculado
    long pasos = resultado2.obtenerSegundo(); // Número de pasos
    int[][] solucion = resultado2.obtenerTercero(); // Matriz de solución

    // Crear un panel para mostrar los resultados
    JPanel panelResultado = new JPanel(new BorderLayout(10, 10));

    // Panel superior con información de texto
    String info = "<html><h3>Resultado del Algoritmo</h3>" +
                  "<b>Algoritmo:</b> " + algoritmo + "<br>" +
                  "<b>Coste:</b> " + coste + "<br>" +
                  "<b>Pasos:</b> " + pasos + "</html>";
    JLabel labelInfo = new JLabel(info);
    panelResultado.add(labelInfo, BorderLayout.NORTH);

    // Panel central para mostrar la solución como una matriz
    int filas = solucion.length;
    int columnas = solucion[0].length;
    JPanel panelMatriz = new JPanel(new GridLayout(filas, columnas, 5, 5));
    panelMatriz.setBorder(BorderFactory.createTitledBorder("Distribución de la Estantería"));

    for (int[] fila : solucion) {
        for (int celda : fila) {
            String nombreProducto = CP.obtenerP(celda).obtenerNombre(); // Obtener el nombre del producto para cada celda
            String marcaProducto = CP.obtenerP(celda).obtenerMarca(); // Obtener la marca
            String descripcionProducto = CP.obtenerP(celda).obtenerDescripcion(); // Obtener la descripción
            double peso = CP.obtenerP(celda).obtenerPeso();
            double precio = CP.obtenerP(celda).obtenerPrecio();
            
            JLabel celdaLabel = new JLabel(nombreProducto, SwingConstants.CENTER);
            celdaLabel.setOpaque(true);
            celdaLabel.setBackground(Color.LIGHT_GRAY);
            celdaLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            
            
            // Añadir listener para mostrar el ID al hacer clic
            celdaLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    String mensaje = "<html><b>ID del producto:</b> " + celda + "<br>" +
                                     "<b>Nombre:</b> " + nombreProducto + "<br>" +
                                     "<b>Marca:</b> " + marcaProducto + "<br>" +
                                     "<b>Descripción:</b> " + descripcionProducto + "<br>" +
                                     "<b>Peso:</b> " + peso + "<b> g</b> "+ "<br>" +
                                     "<b>Precio:</b> " + precio + "<b> €</b>" + "</html>";
                    JOptionPane.showMessageDialog(null, mensaje, "Información del Producto", JOptionPane.INFORMATION_MESSAGE);
                }
            });

            panelMatriz.add(celdaLabel);
        }
    }
    panelResultado.add(panelMatriz, BorderLayout.CENTER);

    // Panel inferior con botones (si corresponde)
    if (mostrarBotones) {
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.RIGHT));

        JButton btnGuardar = new JButton("Guardar");
        btnGuardar.setBackground(Color.BLUE);
        btnGuardar.setForeground(Color.WHITE);
        btnGuardar.addActionListener(e -> guardarResultado());
        
        JButton btnEliminar = new JButton("Eliminar");
        btnEliminar.setBackground(Color.RED);
        btnEliminar.setForeground(Color.WHITE);
        btnEliminar.addActionListener(e -> borrarDistribucion(idDist));

        panelBotones.add(btnGuardar);
        panelBotones.add(btnEliminar);

        panelResultado.add(panelBotones, BorderLayout.SOUTH);
    }

    // Mostrar en el panel de destino
    panelDestino.removeAll();
    panelDestino.add(panelResultado, BorderLayout.CENTER);
    panelDestino.revalidate();
    panelDestino.repaint();
}
    //Cambiar contraseña
    private void modificarContraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarContraActionPerformed
       // Inicializar el panel lateral si no está inicializado
       inicializarPanelLateral();
       cambiarModoPanel("cambiarContraseña");

       // Obtener el contenedor principal
       java.awt.Container container = this.getContentPane();

       // Verificar si el panel lateral ya está añadido
       if (panelLateral.getParent() == null) {
           // Añadir el panel lateral al borde este
           container.add(panelLateral, BorderLayout.EAST);

           // Forzar la actualización visual
           container.revalidate();
           container.repaint();

           //JOptionPane.showMessageDialog(this, "El panel lateral se ha añadido correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
       } 
    }//GEN-LAST:event_modificarContraActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JButton crearDist;
    private javax.swing.JButton modificarContra;
    private javax.swing.JButton mostrarDist;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
